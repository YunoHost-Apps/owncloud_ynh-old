#!/bin/bash

set -e

APP='owncloud'
APPNAME=`echo -n own;echo 'cloud'`
SOURCES=`echo -n $APPNAME;echo '-8.2.0'`

# Retrieve arguments
domain=$1
path=$2
user=$3

# Check user parameter
sudo yunohost user list --json | grep -qi "\"username\": \"$user\"" \
	|| (echo "User does not exist: $user" && exit 1)
sudo yunohost app setting $APP admin_user -v $user

# Check domain/path availability
sudo yunohost app checkurl $domain$path -a $APP \
	|| (echo "Path not available: $domain$path" && exit 1)

# Remove trailing "/" for next commands
path=${path%/}

# Install dependencies
sudo apt-get update -qq
sudo apt-get install acl smbclient php5-cli php-apc coreutils gnupg tar -y -qq

# Generate random password
db_pwd=$(dd if=/dev/urandom bs=1 count=200 2> /dev/null | tr -c -d 'A-Za-z0-9' | sed -n 's/\(.\{24\}\).*/\1/p')

# Use 'owncloud' as database name and user
db_user=$APP

# Initialize database and store mysql password for upgrade
sudo yunohost app initdb $db_user -p $db_pwd
sudo yunohost app setting $APP mysqlpwd -v $db_pwd

# Delete db and user if exit with an error
function exit_properly
{
    set +e
    root_pwd=$(sudo cat /etc/yunohost/mysql)
    mysql -u root -p$root_pwd -e "DROP DATABASE $APP ; DROP USER $APP@localhost ;"
    sudo rm -f /etc/php5/fpm/pool.d/$APP.conf

    sudo killall php5-fpm
    sudo service php5-fpm start
    sudo userdel $APP
    sudo rm -Rf /var/www/$APP
    exit 1
}
trap exit_properly ERR

# Create owncloud user
sudo useradd -d /var/www/$APP $APP \
	|| exit_properly

# Add yunohost.multimedia directory
wget https://github.com/maniackcrudelis/yunohost.multimedia/archive/master.zip
unzip master.zip
sudo ./yunohost.multimedia-master/script/ynh_media_build.sh
# Add access to yunohost.multimedia dir
sudo usermod -a -G multimedia $APP

# Verify sources and extract it
sha256sum --strict --quiet -c ../sources/$SOURCES.tar.bz2.sha256sum < ../sources/$SOURCES.tar.bz2
gpg --import ../sources/$APPNAME.asc
gpg --verify ../sources/$SOURCES.tar.bz2.asc ../sources/$SOURCES.tar.bz2
sudo mkdir -p ../tmp/
sudo tar -jxf ../sources/$SOURCES.tar.bz2 -C ../tmp/

# Copy files to the right place
final_path=/var/www/$APP
data_path=/home/yunohost.app/$APP/data
sudo mkdir -p $final_path
sudo mkdir -p $data_path
sudo cp -a ../tmp/$APPNAME/. $final_path/
sudo cp -a ../conf/ow-setup $final_path/ow-setup
sudo cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/$APP.conf
sudo cp ../conf/php-fpm.conf /etc/php5/fpm/pool.d/$APP.conf
sudo ls /usr/lib/php5/2*/ | grep apc.so \
  && sudo cp ../conf/20-apc.ini /etc/php5/cli/conf.d/20-apc.ini \
  || sudo cp ../conf/20-apcu.ini /etc/php5/cli/conf.d/20-apcu.ini
sudo cp ../conf/mount.json $data_path
sudo chown -hR $APP:www-data $final_path
sudo chown -hR $APP:www-data $data_path
sudo chown $APP:www-data /home/yunohost.app/$APP
sudo chmod 755 /home/yunohost.app
sudo chmod -R u=rwX,g=rwX,o=rX $final_path
sudo chmod -R u=rwX,g=rwX,o= $data_path

# Needed for Jessie/PHP5.6 compatibility
sudo sed -i "s/;always_populate_raw/always_populate_raw/" /etc/php5/cli/php.ini

# Change variables in Owncloud configuration
if [[ "$path" == "" ]]; then
    sudo sed -i "s@LOCATIONTOCHANGE@/@g" /etc/nginx/conf.d/$domain.d/$APP.conf
else
	sudo sed -i "s@LOCATIONTOCHANGE@$path@g" /etc/nginx/conf.d/$domain.d/$APP.conf
fi
sudo sed -i "s@PATHTOCHANGE@$path@g" /etc/nginx/conf.d/$domain.d/$APP.conf
sudo sed -i "s@ALIASTOCHANGE@$final_path/@g" /etc/nginx/conf.d/$domain.d/$APP.conf
sudo sed -i "s@NAMETOCHANGE@$APP@g" /etc/nginx/conf.d/$domain.d/$APP.conf
sudo sed -i "s@NAMETOCHANGE@$APP@g" /etc/php5/fpm/pool.d/$APP.conf

# Set permissions to owncloud directories and /home directories + add Home external storage
for i in $(ls /home)
do
    sudo yunohost user list --json | grep -q "\"username\": \"$i\"" && (
	    sudo mkdir $data_path/$i
	    sudo setfacl -m g:$APP:rwx /home/$i || echo "ACL not available"
	) || true
done

# Reload Nginx and regenerate SSOwat conf
sudo killall php5-fpm
sudo service php5-fpm start
sudo service nginx reload
sudo yunohost app setting $APP unprotected_uris -v "/"
sudo yunohost app ssowatconf

# Owncloud installation via curl
old_pwd=$(pwd)
cd $final_path
sudo sed -i "s@public static function checkInstalled() {@public static function checkInstalled() { return;@g" $final_path/lib/base.php
sudo su -c "php ow-setup --adminlogin=admin --adminpass=$db_pwd --directory=/home/yunohost.app/$APP/data --dbtype=mysql --dbuser=$db_user --dbpass=$db_pwd --dbname=$db_user --dbhost=localhost --trusted_domain=$domain" $APP
sudo sed -i "s@public static function checkInstalled() { return;@public static function checkInstalled() {@g" $final_path/lib/base.php
sudo rm -f $final_path/ow-setup
cd $old_pwd


# Check if the Mysql database is initialized & running
sleep 2
mysql -u $db_user -p$db_pwd $db_user -e "select * from oc_appconfig;" > /dev/null 2>&1 \
    || (echo "Owncloud is not properly installed" && exit_properly)

# Enable plugins
old_pwd=$(pwd)
cd $final_path
sudo su -c "php occ app:enable files_external -n -q --no-ansi" $APP
sudo su -c "php occ app:enable user_ldap -n -q --no-ansi" $APP

# Enable and configure LDAP and external storage plugin
sudo su -c "php occ ldap:create-empty-config -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapBase dc=yunohost,dc=org -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapBaseGroups dc=yunohost,dc=org -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapBaseUsers dc=yunohost,dc=org -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapCacheTTL 600 -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapConfigurationActive 1 -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapEmailAttribute mail -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapExperiencedAdmin 0 -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapExpertUsernameAttr uid -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapGroupDisplayName cn -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapGroupFilter objectClass=posixGroup -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapGroupFilterMode 0 -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapGroupMemberAssocAttr uniqueMember -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapHost localhost -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapLoginFilter '(&(|(objectclass=mailAccount))(uid=%uid))' -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapLoginFilterEmail 0 -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapLoginFilterMode 0 -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapLoginFilterUsername 1 -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapNestedGroups 0 -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapPagingSize 500 -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapPort 389 -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapQuotaAttribute mailQuota -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapTLS 0 -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapUserDisplayName cn -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapUserFilter objectClass=mailAccount -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapUserFilterMode 0 -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapUuidGroupAttribute auto -n -q --no-ansi" $APP
sudo su -c "php occ ldap:set-config '' ldapUuidUserAttribute auto -n -q --no-ansi" $APP

cd $old_pwd

sudo chown -hR $APP:$APP $final_path
sudo chown -hR $APP:$APP $data_path
sudo chmod 755 /home/yunohost.app
sudo chmod -R 665 $final_path
sudo find $final_path -type d -print0 | xargs -0 sudo chmod 775 \
	|| echo "No file to modify"
sudo chmod -R 770 $data_path

# Make an LDAP user as admin
mysql -u $db_user -p$db_pwd $db_user -e "INSERT INTO oc_group_user VALUES ('admin','$user');"

#Configure cache
if ! grep -Fq "memcache" $final_path/config/config.php
then
    sudo bash -c "echo \"\\\$CONFIG['memcache.local']= '\OC\Memcache\APC';\" >> $final_path/config/config.php"
fi
if ! grep -Fq "memcache.locking" $final_path/config/config.php
then
    sudo bash -c "echo \"\\\$CONFIG['memcache.locking']= '\OC\Memcache\APC';\" >> $final_path/config/config.php"
fi
